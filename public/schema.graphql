# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  torrents(cursor: TorrentWhereUniqueInput, distinct: [TorrentScalarFieldEnum!], orderBy: [TorrentOrderByWithRelationInput!], skip: Int, take: Int, where: TorrentWhereInput): [Torrent!]!
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Torrent {
  _count: TorrentCount
  addedAt: DateTime!
  completedAt: DateTime
  createdAt: DateTime!
  downloaded: Float!
  hash: String!
  name: String!
  path: String!
  progress: Float!
  ratio: Float!
  size: Float!
  status: String!
  torrentId: String!
  transmissionId: Int!
  updatedAt: DateTime!
  uploaded: Float!
}

type TorrentCount {
  files: Int!
}

input TorrentFileListRelationFilter {
  every: TorrentFileWhereInput
  none: TorrentFileWhereInput
  some: TorrentFileWhereInput
}

input TorrentFileOrderByRelationAggregateInput {
  _count: SortOrder
}

input TorrentFileWhereInput {
  AND: [TorrentFileWhereInput!]
  NOT: [TorrentFileWhereInput!]
  OR: [TorrentFileWhereInput!]
  Torrent: TorrentRelationFilter
  createdAt: DateTimeFilter
  downloaded: FloatFilter
  name: StringFilter
  size: FloatFilter
  torrentFileId: StringFilter
  torrentId: StringNullableFilter
  updatedAt: DateTimeFilter
}

input TorrentOrderByWithRelationInput {
  addedAt: SortOrder
  completedAt: SortOrder
  createdAt: SortOrder
  downloaded: SortOrder
  files: TorrentFileOrderByRelationAggregateInput
  hash: SortOrder
  name: SortOrder
  path: SortOrder
  progress: SortOrder
  ratio: SortOrder
  size: SortOrder
  status: SortOrder
  torrentId: SortOrder
  transmissionId: SortOrder
  updatedAt: SortOrder
  uploaded: SortOrder
}

input TorrentRelationFilter {
  is: TorrentWhereInput
  isNot: TorrentWhereInput
}

enum TorrentScalarFieldEnum {
  addedAt
  completedAt
  createdAt
  downloaded
  hash
  name
  path
  progress
  ratio
  size
  status
  torrentId
  transmissionId
  updatedAt
  uploaded
}

input TorrentWhereInput {
  AND: [TorrentWhereInput!]
  NOT: [TorrentWhereInput!]
  OR: [TorrentWhereInput!]
  addedAt: DateTimeFilter
  completedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  downloaded: FloatFilter
  files: TorrentFileListRelationFilter
  hash: StringFilter
  name: StringFilter
  path: StringFilter
  progress: FloatFilter
  ratio: FloatFilter
  size: FloatFilter
  status: StringFilter
  torrentId: StringFilter
  transmissionId: IntFilter
  updatedAt: DateTimeFilter
  uploaded: FloatFilter
}

input TorrentWhereUniqueInput {
  hash: String
  torrentId: String
}

type User {
  createdAt: DateTime!
  email: String!
  firstName: String!
  isDisabled: Boolean!
  lastName: String!
  updatedAt: DateTime!
  userId: String!
}

input UserOrderByWithRelationInput {
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  isDisabled: SortOrder
  lastName: SortOrder
  password: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

enum UserScalarFieldEnum {
  createdAt
  email
  firstName
  isDisabled
  lastName
  password
  updatedAt
  userId
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  firstName: StringFilter
  isDisabled: BoolFilter
  lastName: StringFilter
  password: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input UserWhereUniqueInput {
  email: String
  userId: String
}
