# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  torrents(cursor: TorrentWhereUniqueInput, distinct: [TorrentScalarFieldEnum!], orderBy: [TorrentOrderByWithRelationInput!], skip: Int, take: Int, where: TorrentWhereInput): [Torrent!]!
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Torrent {
  createdAt: DateTime!
  hash: String!
  name: String!
  percentDone: String!
  status: String!
  torrentId: String!
  totalSize: String!
  updatedAt: DateTime!
}

input TorrentOrderByWithRelationInput {
  createdAt: SortOrder
  hash: SortOrder
  name: SortOrder
  percentDone: SortOrder
  status: SortOrder
  torrentId: SortOrder
  totalSize: SortOrder
  updatedAt: SortOrder
}

enum TorrentScalarFieldEnum {
  createdAt
  hash
  name
  percentDone
  status
  torrentId
  totalSize
  updatedAt
}

input TorrentWhereInput {
  AND: [TorrentWhereInput!]
  NOT: [TorrentWhereInput!]
  OR: [TorrentWhereInput!]
  createdAt: DateTimeFilter
  hash: StringFilter
  name: StringFilter
  percentDone: StringFilter
  status: StringFilter
  torrentId: StringFilter
  totalSize: StringFilter
  updatedAt: DateTimeFilter
}

input TorrentWhereUniqueInput {
  hash: String
  torrentId: String
}

type User {
  createdAt: DateTime!
  email: String!
  firstName: String!
  isDisabled: Boolean!
  lastName: String!
  password: String!
  updatedAt: DateTime!
  userId: String!
}

input UserOrderByWithRelationInput {
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  isDisabled: SortOrder
  lastName: SortOrder
  password: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

enum UserScalarFieldEnum {
  createdAt
  email
  firstName
  isDisabled
  lastName
  password
  updatedAt
  userId
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  firstName: StringFilter
  isDisabled: BoolFilter
  lastName: StringFilter
  password: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input UserWhereUniqueInput {
  email: String
  userId: String
}
