# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateTorrent {
  _avg: TorrentAvgAggregate
  _count: TorrentCountAggregate
  _max: TorrentMaxAggregate
  _min: TorrentMinAggregate
  _sum: TorrentSumAggregate
}

type AggregateUser {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input FloatWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedFloatFilter
  _min: NestedFloatFilter
  _sum: NestedFloatFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatWithAggregatesFilter
  notIn: [Float!]
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

type Mutation {
  createTorrent(data: TorrentCreateInput!): Torrent!
  createUser(data: UserCreateInput!): User!
  deleteManyTorrent(where: TorrentWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteTorrent(where: TorrentWhereUniqueInput!): Torrent
  deleteUser(where: UserWhereUniqueInput!): User
  updateManyTorrent(data: TorrentUpdateManyMutationInput!, where: TorrentWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateTorrent(data: TorrentUpdateInput!, where: TorrentWhereUniqueInput!): Torrent
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertTorrent(create: TorrentCreateInput!, update: TorrentUpdateInput!, where: TorrentWhereUniqueInput!): Torrent!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedFloatFilter
  _min: NestedFloatFilter
  _sum: NestedFloatFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatWithAggregatesFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

type Query {
  aggregateTorrent(cursor: TorrentWhereUniqueInput, orderBy: [TorrentOrderByWithRelationInput!], skip: Int, take: Int, where: TorrentWhereInput): AggregateTorrent!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  findFirstTorrent(cursor: TorrentWhereUniqueInput, distinct: [TorrentScalarFieldEnum!], orderBy: [TorrentOrderByWithRelationInput!], skip: Int, take: Int, where: TorrentWhereInput): Torrent
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  groupByTorrent(by: [TorrentScalarFieldEnum!]!, having: TorrentScalarWhereWithAggregatesInput, orderBy: [TorrentOrderByWithAggregationInput!], skip: Int, take: Int, where: TorrentWhereInput): [TorrentGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  torrent(where: TorrentWhereUniqueInput!): Torrent
  torrents(cursor: TorrentWhereUniqueInput, distinct: [TorrentScalarFieldEnum!], orderBy: [TorrentOrderByWithRelationInput!], skip: Int, take: Int, where: TorrentWhereInput): [Torrent!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Subscription {
  realtimeUpdates: Torrent!
}

type Torrent {
  _count: TorrentCount
  addedAt: DateTime!
  completedAt: DateTime
  createdAt: DateTime!
  downloaded: Float!
  hash: String!
  name: String!
  path: String!
  progress: Float!
  ratio: Float!
  size: Float!
  stats: TorrentStats!
  status: String!
  torrentId: String!
  transmissionId: Int!
  updatedAt: DateTime!
  uploaded: Float!
}

type TorrentAvgAggregate {
  downloaded: Float
  progress: Float
  ratio: Float
  size: Float
  transmissionId: Float
  uploaded: Float
}

input TorrentAvgOrderByAggregateInput {
  downloaded: SortOrder
  progress: SortOrder
  ratio: SortOrder
  size: SortOrder
  transmissionId: SortOrder
  uploaded: SortOrder
}

type TorrentCount {
  files: Int!
}

type TorrentCountAggregate {
  _all: Int!
  addedAt: Int!
  completedAt: Int!
  createdAt: Int!
  downloaded: Int!
  hash: Int!
  name: Int!
  path: Int!
  progress: Int!
  ratio: Int!
  size: Int!
  status: Int!
  torrentId: Int!
  transmissionId: Int!
  updatedAt: Int!
  uploaded: Int!
}

input TorrentCountOrderByAggregateInput {
  addedAt: SortOrder
  completedAt: SortOrder
  createdAt: SortOrder
  downloaded: SortOrder
  hash: SortOrder
  name: SortOrder
  path: SortOrder
  progress: SortOrder
  ratio: SortOrder
  size: SortOrder
  status: SortOrder
  torrentId: SortOrder
  transmissionId: SortOrder
  updatedAt: SortOrder
  uploaded: SortOrder
}

input TorrentCreateInput {
  addedAt: DateTime!
  completedAt: DateTime
  createdAt: DateTime
  downloaded: Float
  files: TorrentFileCreateNestedManyWithoutTorrentInput
  hash: String!
  name: String!
  path: String!
  progress: Float
  ratio: Float
  size: Float!
  status: String!
  torrentId: String
  transmissionId: Int!
  updatedAt: DateTime
  uploaded: Float
}

input TorrentFileCreateNestedManyWithoutTorrentInput {
  connect: [TorrentFileWhereUniqueInput!]
  connectOrCreate: [TorrentFileCreateOrConnectWithoutTorrentInput!]
  create: [TorrentFileCreateWithoutTorrentInput!]
}

input TorrentFileCreateOrConnectWithoutTorrentInput {
  create: TorrentFileCreateWithoutTorrentInput!
  where: TorrentFileWhereUniqueInput!
}

input TorrentFileCreateWithoutTorrentInput {
  createdAt: DateTime
  downloaded: Float
  name: String!
  size: Float!
  torrentFileId: String
  updatedAt: DateTime
}

input TorrentFileListRelationFilter {
  every: TorrentFileWhereInput
  none: TorrentFileWhereInput
  some: TorrentFileWhereInput
}

input TorrentFileOrderByRelationAggregateInput {
  _count: SortOrder
}

input TorrentFileScalarWhereInput {
  AND: [TorrentFileScalarWhereInput!]
  NOT: [TorrentFileScalarWhereInput!]
  OR: [TorrentFileScalarWhereInput!]
  createdAt: DateTimeFilter
  downloaded: FloatFilter
  name: StringFilter
  size: FloatFilter
  torrentFileId: StringFilter
  torrentId: StringNullableFilter
  updatedAt: DateTimeFilter
}

input TorrentFileUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  downloaded: FloatFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  size: FloatFieldUpdateOperationsInput
  torrentFileId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TorrentFileUpdateManyWithWhereWithoutTorrentInput {
  data: TorrentFileUpdateManyMutationInput!
  where: TorrentFileScalarWhereInput!
}

input TorrentFileUpdateManyWithoutTorrentInput {
  connect: [TorrentFileWhereUniqueInput!]
  connectOrCreate: [TorrentFileCreateOrConnectWithoutTorrentInput!]
  create: [TorrentFileCreateWithoutTorrentInput!]
  delete: [TorrentFileWhereUniqueInput!]
  deleteMany: [TorrentFileScalarWhereInput!]
  disconnect: [TorrentFileWhereUniqueInput!]
  set: [TorrentFileWhereUniqueInput!]
  update: [TorrentFileUpdateWithWhereUniqueWithoutTorrentInput!]
  updateMany: [TorrentFileUpdateManyWithWhereWithoutTorrentInput!]
  upsert: [TorrentFileUpsertWithWhereUniqueWithoutTorrentInput!]
}

input TorrentFileUpdateWithWhereUniqueWithoutTorrentInput {
  data: TorrentFileUpdateWithoutTorrentInput!
  where: TorrentFileWhereUniqueInput!
}

input TorrentFileUpdateWithoutTorrentInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  downloaded: FloatFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  size: FloatFieldUpdateOperationsInput
  torrentFileId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TorrentFileUpsertWithWhereUniqueWithoutTorrentInput {
  create: TorrentFileCreateWithoutTorrentInput!
  update: TorrentFileUpdateWithoutTorrentInput!
  where: TorrentFileWhereUniqueInput!
}

input TorrentFileWhereInput {
  AND: [TorrentFileWhereInput!]
  NOT: [TorrentFileWhereInput!]
  OR: [TorrentFileWhereInput!]
  Torrent: TorrentRelationFilter
  createdAt: DateTimeFilter
  downloaded: FloatFilter
  name: StringFilter
  size: FloatFilter
  torrentFileId: StringFilter
  torrentId: StringNullableFilter
  updatedAt: DateTimeFilter
}

input TorrentFileWhereUniqueInput {
  torrentFileId: String
}

type TorrentGroupBy {
  _avg: TorrentAvgAggregate
  _count: TorrentCountAggregate
  _max: TorrentMaxAggregate
  _min: TorrentMinAggregate
  _sum: TorrentSumAggregate
  addedAt: DateTime!
  completedAt: DateTime
  createdAt: DateTime!
  downloaded: Float!
  hash: String!
  name: String!
  path: String!
  progress: Float!
  ratio: Float!
  size: Float!
  status: String!
  torrentId: String!
  transmissionId: Int!
  updatedAt: DateTime!
  uploaded: Float!
}

type TorrentMaxAggregate {
  addedAt: DateTime
  completedAt: DateTime
  createdAt: DateTime
  downloaded: Float
  hash: String
  name: String
  path: String
  progress: Float
  ratio: Float
  size: Float
  status: String
  torrentId: String
  transmissionId: Int
  updatedAt: DateTime
  uploaded: Float
}

input TorrentMaxOrderByAggregateInput {
  addedAt: SortOrder
  completedAt: SortOrder
  createdAt: SortOrder
  downloaded: SortOrder
  hash: SortOrder
  name: SortOrder
  path: SortOrder
  progress: SortOrder
  ratio: SortOrder
  size: SortOrder
  status: SortOrder
  torrentId: SortOrder
  transmissionId: SortOrder
  updatedAt: SortOrder
  uploaded: SortOrder
}

type TorrentMinAggregate {
  addedAt: DateTime
  completedAt: DateTime
  createdAt: DateTime
  downloaded: Float
  hash: String
  name: String
  path: String
  progress: Float
  ratio: Float
  size: Float
  status: String
  torrentId: String
  transmissionId: Int
  updatedAt: DateTime
  uploaded: Float
}

input TorrentMinOrderByAggregateInput {
  addedAt: SortOrder
  completedAt: SortOrder
  createdAt: SortOrder
  downloaded: SortOrder
  hash: SortOrder
  name: SortOrder
  path: SortOrder
  progress: SortOrder
  ratio: SortOrder
  size: SortOrder
  status: SortOrder
  torrentId: SortOrder
  transmissionId: SortOrder
  updatedAt: SortOrder
  uploaded: SortOrder
}

input TorrentOrderByWithAggregationInput {
  _avg: TorrentAvgOrderByAggregateInput
  _count: TorrentCountOrderByAggregateInput
  _max: TorrentMaxOrderByAggregateInput
  _min: TorrentMinOrderByAggregateInput
  _sum: TorrentSumOrderByAggregateInput
  addedAt: SortOrder
  completedAt: SortOrder
  createdAt: SortOrder
  downloaded: SortOrder
  hash: SortOrder
  name: SortOrder
  path: SortOrder
  progress: SortOrder
  ratio: SortOrder
  size: SortOrder
  status: SortOrder
  torrentId: SortOrder
  transmissionId: SortOrder
  updatedAt: SortOrder
  uploaded: SortOrder
}

input TorrentOrderByWithRelationInput {
  addedAt: SortOrder
  completedAt: SortOrder
  createdAt: SortOrder
  downloaded: SortOrder
  files: TorrentFileOrderByRelationAggregateInput
  hash: SortOrder
  name: SortOrder
  path: SortOrder
  progress: SortOrder
  ratio: SortOrder
  size: SortOrder
  status: SortOrder
  torrentId: SortOrder
  transmissionId: SortOrder
  updatedAt: SortOrder
  uploaded: SortOrder
}

input TorrentRelationFilter {
  is: TorrentWhereInput
  isNot: TorrentWhereInput
}

enum TorrentScalarFieldEnum {
  addedAt
  completedAt
  createdAt
  downloaded
  hash
  name
  path
  progress
  ratio
  size
  status
  torrentId
  transmissionId
  updatedAt
  uploaded
}

input TorrentScalarWhereWithAggregatesInput {
  AND: [TorrentScalarWhereWithAggregatesInput!]
  NOT: [TorrentScalarWhereWithAggregatesInput!]
  OR: [TorrentScalarWhereWithAggregatesInput!]
  addedAt: DateTimeWithAggregatesFilter
  completedAt: DateTimeNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  downloaded: FloatWithAggregatesFilter
  hash: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  path: StringWithAggregatesFilter
  progress: FloatWithAggregatesFilter
  ratio: FloatWithAggregatesFilter
  size: FloatWithAggregatesFilter
  status: StringWithAggregatesFilter
  torrentId: StringWithAggregatesFilter
  transmissionId: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  uploaded: FloatWithAggregatesFilter
}

type TorrentStats {
  downloadSpeed: Float
  eta: Float
  peers: Float
  seeds: Float
  torrentId: String!
  uploadSpeed: Float
}

type TorrentSumAggregate {
  downloaded: Float
  progress: Float
  ratio: Float
  size: Float
  transmissionId: Int
  uploaded: Float
}

input TorrentSumOrderByAggregateInput {
  downloaded: SortOrder
  progress: SortOrder
  ratio: SortOrder
  size: SortOrder
  transmissionId: SortOrder
  uploaded: SortOrder
}

input TorrentUpdateInput {
  addedAt: DateTimeFieldUpdateOperationsInput
  completedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  downloaded: FloatFieldUpdateOperationsInput
  files: TorrentFileUpdateManyWithoutTorrentInput
  hash: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  path: StringFieldUpdateOperationsInput
  progress: FloatFieldUpdateOperationsInput
  ratio: FloatFieldUpdateOperationsInput
  size: FloatFieldUpdateOperationsInput
  status: StringFieldUpdateOperationsInput
  torrentId: StringFieldUpdateOperationsInput
  transmissionId: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  uploaded: FloatFieldUpdateOperationsInput
}

input TorrentUpdateManyMutationInput {
  addedAt: DateTimeFieldUpdateOperationsInput
  completedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  downloaded: FloatFieldUpdateOperationsInput
  hash: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  path: StringFieldUpdateOperationsInput
  progress: FloatFieldUpdateOperationsInput
  ratio: FloatFieldUpdateOperationsInput
  size: FloatFieldUpdateOperationsInput
  status: StringFieldUpdateOperationsInput
  torrentId: StringFieldUpdateOperationsInput
  transmissionId: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  uploaded: FloatFieldUpdateOperationsInput
}

input TorrentWhereInput {
  AND: [TorrentWhereInput!]
  NOT: [TorrentWhereInput!]
  OR: [TorrentWhereInput!]
  addedAt: DateTimeFilter
  completedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  downloaded: FloatFilter
  files: TorrentFileListRelationFilter
  hash: StringFilter
  name: StringFilter
  path: StringFilter
  progress: FloatFilter
  ratio: FloatFilter
  size: FloatFilter
  status: StringFilter
  torrentId: StringFilter
  transmissionId: IntFilter
  updatedAt: DateTimeFilter
  uploaded: FloatFilter
}

input TorrentWhereUniqueInput {
  hash: String
  torrentId: String
}

type User {
  createdAt: DateTime!
  email: String!
  firstName: String!
  isDisabled: Boolean!
  lastName: String!
  updatedAt: DateTime!
  userId: String!
}

type UserCountAggregate {
  _all: Int!
  createdAt: Int!
  email: Int!
  firstName: Int!
  isDisabled: Int!
  lastName: Int!
  password: Int!
  updatedAt: Int!
  userId: Int!
}

input UserCountOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  isDisabled: SortOrder
  lastName: SortOrder
  password: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input UserCreateInput {
  createdAt: DateTime
  email: String!
  firstName: String!
  isDisabled: Boolean
  lastName: String!
  password: String!
  updatedAt: DateTime
  userId: String
}

type UserGroupBy {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  createdAt: DateTime!
  email: String!
  firstName: String!
  isDisabled: Boolean!
  lastName: String!
  password: String!
  updatedAt: DateTime!
  userId: String!
}

type UserMaxAggregate {
  createdAt: DateTime
  email: String
  firstName: String
  isDisabled: Boolean
  lastName: String
  password: String
  updatedAt: DateTime
  userId: String
}

input UserMaxOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  isDisabled: SortOrder
  lastName: SortOrder
  password: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type UserMinAggregate {
  createdAt: DateTime
  email: String
  firstName: String
  isDisabled: Boolean
  lastName: String
  password: String
  updatedAt: DateTime
  userId: String
}

input UserMinOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  isDisabled: SortOrder
  lastName: SortOrder
  password: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input UserOrderByWithAggregationInput {
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  isDisabled: SortOrder
  lastName: SortOrder
  password: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input UserOrderByWithRelationInput {
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  isDisabled: SortOrder
  lastName: SortOrder
  password: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

enum UserScalarFieldEnum {
  createdAt
  email
  firstName
  isDisabled
  lastName
  password
  updatedAt
  userId
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  email: StringWithAggregatesFilter
  firstName: StringWithAggregatesFilter
  isDisabled: BoolWithAggregatesFilter
  lastName: StringWithAggregatesFilter
  password: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input UserUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  isDisabled: BoolFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  isDisabled: BoolFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  firstName: StringFilter
  isDisabled: BoolFilter
  lastName: StringFilter
  password: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input UserWhereUniqueInput {
  email: String
  userId: String
}
